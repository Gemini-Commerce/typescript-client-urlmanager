/* tslint:disable */
/* eslint-disable */
/**
 * Url Manager Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GetUrlRewriteRequestCompoundIdentifier
 */
export interface GetUrlRewriteRequestCompoundIdentifier {
    /**
     * 
     * @type {string}
     * @memberof GetUrlRewriteRequestCompoundIdentifier
     */
    'context'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUrlRewriteRequestCompoundIdentifier
     */
    'requestPath'?: string;
}
/**
 * 
 * @export
 * @interface ListUrlRewritesRequestFilter
 */
export interface ListUrlRewritesRequestFilter {
    /**
     * 
     * @type {string}
     * @memberof ListUrlRewritesRequestFilter
     */
    'context'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListUrlRewritesRequestFilter
     */
    'requestPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListUrlRewritesRequestFilter
     */
    'targetPath'?: string;
    /**
     * 
     * @type {UrlRewriteRedirectType}
     * @memberof ListUrlRewritesRequestFilter
     */
    'redirectType'?: UrlRewriteRedirectType;
}


/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    'typeUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const UrlRewriteLinkRel = {
    Unknown: 'LinkRel_UNKNOWN',
    None: 'LinkRel_NONE',
    Canonical: 'LinkRel_CANONICAL',
    Alternate: 'LinkRel_ALTERNATE'
} as const;

export type UrlRewriteLinkRel = typeof UrlRewriteLinkRel[keyof typeof UrlRewriteLinkRel];


/**
 * 
 * @export
 * @enum {string}
 */

export const UrlRewriteRedirectType = {
    Unknown: 'RedirectType_UNKNOWN',
    Ok: 'RedirectType_OK',
    Permanent: 'RedirectType_PERMANENT',
    Temporary: 'RedirectType_TEMPORARY'
} as const;

export type UrlRewriteRedirectType = typeof UrlRewriteRedirectType[keyof typeof UrlRewriteRedirectType];


/**
 * 
 * @export
 * @interface UrlmanagerChangeUrlRewriteRequestPathRequest
 */
export interface UrlmanagerChangeUrlRewriteRequestPathRequest {
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerChangeUrlRewriteRequestPathRequest
     */
    'tenantId'?: string;
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerChangeUrlRewriteRequestPathRequest
     */
    'context'?: string;
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerChangeUrlRewriteRequestPathRequest
     */
    'requestPath'?: string;
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerChangeUrlRewriteRequestPathRequest
     */
    'requestPathNew'?: string;
}
/**
 * 
 * @export
 * @interface UrlmanagerCreateUrlRewriteRequest
 */
export interface UrlmanagerCreateUrlRewriteRequest {
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerCreateUrlRewriteRequest
     */
    'tenantId'?: string;
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerCreateUrlRewriteRequest
     */
    'context'?: string;
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerCreateUrlRewriteRequest
     */
    'requestPath'?: string;
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerCreateUrlRewriteRequest
     */
    'targetPath'?: string;
    /**
     * 
     * @type {UrlRewriteRedirectType}
     * @memberof UrlmanagerCreateUrlRewriteRequest
     */
    'redirectType'?: UrlRewriteRedirectType;
    /**
     * 
     * @type {UrlRewriteLinkRel}
     * @memberof UrlmanagerCreateUrlRewriteRequest
     */
    'linkRel'?: UrlRewriteLinkRel;
}


/**
 * 
 * @export
 * @interface UrlmanagerDeleteUrlRewriteRequest
 */
export interface UrlmanagerDeleteUrlRewriteRequest {
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerDeleteUrlRewriteRequest
     */
    'tenantId'?: string;
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerDeleteUrlRewriteRequest
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface UrlmanagerGetUrlRewriteRequest
 */
export interface UrlmanagerGetUrlRewriteRequest {
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerGetUrlRewriteRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UrlmanagerGetUrlRewriteRequest
     */
    'id'?: string;
    /**
     * 
     * @type {GetUrlRewriteRequestCompoundIdentifier}
     * @memberof UrlmanagerGetUrlRewriteRequest
     */
    'compoundIdentifier'?: GetUrlRewriteRequestCompoundIdentifier;
}
/**
 * 
 * @export
 * @interface UrlmanagerListUrlRewritesByTargetPathsRequest
 */
export interface UrlmanagerListUrlRewritesByTargetPathsRequest {
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerListUrlRewritesByTargetPathsRequest
     */
    'tenantId'?: string;
    /**
     * Required.
     * @type {Array<string>}
     * @memberof UrlmanagerListUrlRewritesByTargetPathsRequest
     */
    'targetPaths'?: Array<string>;
    /**
     * Optional.
     * @type {string}
     * @memberof UrlmanagerListUrlRewritesByTargetPathsRequest
     */
    'context'?: string;
    /**
     * 
     * @type {UrlRewriteLinkRel}
     * @memberof UrlmanagerListUrlRewritesByTargetPathsRequest
     */
    'linkRel'?: UrlRewriteLinkRel;
}


/**
 * 
 * @export
 * @interface UrlmanagerListUrlRewritesByTargetPathsResponse
 */
export interface UrlmanagerListUrlRewritesByTargetPathsResponse {
    /**
     * 
     * @type {Array<UrlmanagerUrlRewrite>}
     * @memberof UrlmanagerListUrlRewritesByTargetPathsResponse
     */
    'urlRewrites'?: Array<UrlmanagerUrlRewrite>;
}
/**
 * 
 * @export
 * @interface UrlmanagerListUrlRewritesRequest
 */
export interface UrlmanagerListUrlRewritesRequest {
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerListUrlRewritesRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {ListUrlRewritesRequestFilter}
     * @memberof UrlmanagerListUrlRewritesRequest
     */
    'filter'?: ListUrlRewritesRequestFilter;
    /**
     * The maximum number of url rewrites to return. The service may return fewer than this value. If unspecified, at most 10 url rewrites will be returned. The maximum value is 200; values above 200 will be coerced to 200.
     * @type {number}
     * @memberof UrlmanagerListUrlRewritesRequest
     */
    'pageSize'?: number;
    /**
     * A page token, received from a previous `ListUrlRewrites` call. Provide this to retrieve the subsequent page.   When paginating, all other parameters provided to `ListUrlRewrites` must match the call that provided the page token.
     * @type {string}
     * @memberof UrlmanagerListUrlRewritesRequest
     */
    'pageToken'?: string;
}
/**
 * 
 * @export
 * @interface UrlmanagerListUrlRewritesResponse
 */
export interface UrlmanagerListUrlRewritesResponse {
    /**
     * 
     * @type {Array<UrlmanagerUrlRewrite>}
     * @memberof UrlmanagerListUrlRewritesResponse
     */
    'urlRewrites'?: Array<UrlmanagerUrlRewrite>;
    /**
     * A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
     * @type {string}
     * @memberof UrlmanagerListUrlRewritesResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface UrlmanagerResolveUrlRewriteRequest
 */
export interface UrlmanagerResolveUrlRewriteRequest {
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerResolveUrlRewriteRequest
     */
    'tenantId'?: string;
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerResolveUrlRewriteRequest
     */
    'context'?: string;
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerResolveUrlRewriteRequest
     */
    'requestPath'?: string;
}
/**
 * 
 * @export
 * @interface UrlmanagerUrlRewrite
 */
export interface UrlmanagerUrlRewrite {
    /**
     * 
     * @type {string}
     * @memberof UrlmanagerUrlRewrite
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UrlmanagerUrlRewrite
     */
    'id'?: string;
    /**
     * Context field is part of the key. it\'s up to whoever is using the url manager to define it. e.g. locale or market or a concatenation of the two if needed.
     * @type {string}
     * @memberof UrlmanagerUrlRewrite
     */
    'context'?: string;
    /**
     * 
     * @type {string}
     * @memberof UrlmanagerUrlRewrite
     */
    'requestPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof UrlmanagerUrlRewrite
     */
    'targetPath'?: string;
    /**
     * 
     * @type {UrlRewriteRedirectType}
     * @memberof UrlmanagerUrlRewrite
     */
    'redirectType'?: UrlRewriteRedirectType;
    /**
     * 
     * @type {UrlRewriteLinkRel}
     * @memberof UrlmanagerUrlRewrite
     */
    'linkRel'?: UrlRewriteLinkRel;
}



/**
 * BasicOperationsApi - axios parameter creator
 * @export
 */
export const BasicOperationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Change Url Rewrite Request Path
         * @param {UrlmanagerChangeUrlRewriteRequestPathRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUrlRewriteRequestPath: async (body: UrlmanagerChangeUrlRewriteRequestPathRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('changeUrlRewriteRequestPath', 'body', body)
            const localVarPath = `/urlmanager.UrlManager/ChangeUrlRewriteRequestPath`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change Url Rewrite Request Path
         * @param {UrlmanagerChangeUrlRewriteRequestPathRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUrlRewriteRequestPath_1: async (body: UrlmanagerChangeUrlRewriteRequestPathRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('changeUrlRewriteRequestPath_1', 'body', body)
            const localVarPath = `/urlmanager/change_url_rewrite_request_path`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Url Rewrite
         * @param {UrlmanagerCreateUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUrlRewrite: async (body: UrlmanagerCreateUrlRewriteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createUrlRewrite', 'body', body)
            const localVarPath = `/urlmanager.UrlManager/CreateUrlRewrite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Url Rewrite
         * @param {UrlmanagerCreateUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUrlRewrite_2: async (body: UrlmanagerCreateUrlRewriteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createUrlRewrite_2', 'body', body)
            const localVarPath = `/urlmanager/create_url_rewrite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Url Rewrite
         * @param {UrlmanagerDeleteUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUrlRewrite: async (body: UrlmanagerDeleteUrlRewriteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('deleteUrlRewrite', 'body', body)
            const localVarPath = `/urlmanager.UrlManager/DeleteUrlRewrite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Url Rewrite
         * @param {UrlmanagerDeleteUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUrlRewrite_3: async (body: UrlmanagerDeleteUrlRewriteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('deleteUrlRewrite_3', 'body', body)
            const localVarPath = `/urlmanager/delete_url_rewrite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Url Rewrite
         * @param {UrlmanagerGetUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUrlRewrite: async (body: UrlmanagerGetUrlRewriteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getUrlRewrite', 'body', body)
            const localVarPath = `/urlmanager.UrlManager/GetUrlRewrite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Url Rewrite
         * @param {UrlmanagerGetUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUrlRewrite_4: async (body: UrlmanagerGetUrlRewriteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getUrlRewrite_4', 'body', body)
            const localVarPath = `/urlmanager/get_url_rewrite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Url Rewrites
         * @param {UrlmanagerListUrlRewritesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUrlRewrites: async (body: UrlmanagerListUrlRewritesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listUrlRewrites', 'body', body)
            const localVarPath = `/urlmanager.UrlManager/ListUrlRewrites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Url Rewrites By Target Paths
         * @param {UrlmanagerListUrlRewritesByTargetPathsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUrlRewritesByTargetPaths: async (body: UrlmanagerListUrlRewritesByTargetPathsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listUrlRewritesByTargetPaths', 'body', body)
            const localVarPath = `/urlmanager.UrlManager/ListUrlRewritesByTargetPaths`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Url Rewrites By Target Paths
         * @param {UrlmanagerListUrlRewritesByTargetPathsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUrlRewritesByTargetPaths_5: async (body: UrlmanagerListUrlRewritesByTargetPathsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listUrlRewritesByTargetPaths_5', 'body', body)
            const localVarPath = `/urlmanager/list_url_rewrites_by_target_paths`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Url Rewrites
         * @param {UrlmanagerListUrlRewritesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUrlRewrites_6: async (body: UrlmanagerListUrlRewritesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listUrlRewrites_6', 'body', body)
            const localVarPath = `/urlmanager/list_url_rewrites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resolve Url Rewrite
         * @param {UrlmanagerResolveUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveUrlRewrite: async (body: UrlmanagerResolveUrlRewriteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('resolveUrlRewrite', 'body', body)
            const localVarPath = `/urlmanager.UrlManager/ResolveUrlRewrite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resolve Url Rewrite
         * @param {UrlmanagerResolveUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveUrlRewrite_7: async (body: UrlmanagerResolveUrlRewriteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('resolveUrlRewrite_7', 'body', body)
            const localVarPath = `/urlmanager/resolve_url_rewrite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BasicOperationsApi - functional programming interface
 * @export
 */
export const BasicOperationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BasicOperationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Change Url Rewrite Request Path
         * @param {UrlmanagerChangeUrlRewriteRequestPathRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeUrlRewriteRequestPath(body: UrlmanagerChangeUrlRewriteRequestPathRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeUrlRewriteRequestPath(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Change Url Rewrite Request Path
         * @param {UrlmanagerChangeUrlRewriteRequestPathRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeUrlRewriteRequestPath_1(body: UrlmanagerChangeUrlRewriteRequestPathRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeUrlRewriteRequestPath_1(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Url Rewrite
         * @param {UrlmanagerCreateUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUrlRewrite(body: UrlmanagerCreateUrlRewriteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UrlmanagerUrlRewrite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUrlRewrite(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Url Rewrite
         * @param {UrlmanagerCreateUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUrlRewrite_2(body: UrlmanagerCreateUrlRewriteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UrlmanagerUrlRewrite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUrlRewrite_2(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Url Rewrite
         * @param {UrlmanagerDeleteUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUrlRewrite(body: UrlmanagerDeleteUrlRewriteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUrlRewrite(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Url Rewrite
         * @param {UrlmanagerDeleteUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUrlRewrite_3(body: UrlmanagerDeleteUrlRewriteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUrlRewrite_3(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Url Rewrite
         * @param {UrlmanagerGetUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUrlRewrite(body: UrlmanagerGetUrlRewriteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UrlmanagerUrlRewrite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUrlRewrite(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Url Rewrite
         * @param {UrlmanagerGetUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUrlRewrite_4(body: UrlmanagerGetUrlRewriteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UrlmanagerUrlRewrite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUrlRewrite_4(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Url Rewrites
         * @param {UrlmanagerListUrlRewritesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUrlRewrites(body: UrlmanagerListUrlRewritesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UrlmanagerListUrlRewritesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUrlRewrites(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Url Rewrites By Target Paths
         * @param {UrlmanagerListUrlRewritesByTargetPathsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUrlRewritesByTargetPaths(body: UrlmanagerListUrlRewritesByTargetPathsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UrlmanagerListUrlRewritesByTargetPathsRequest >> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUrlRewritesByTargetPaths(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Url Rewrites By Target Paths
         * @param {UrlmanagerListUrlRewritesByTargetPathsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUrlRewritesByTargetPaths_5(body: UrlmanagerListUrlRewritesByTargetPathsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UrlmanagerListUrlRewritesByTargetPathsRequest >> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUrlRewritesByTargetPaths_5(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Url Rewrites
         * @param {UrlmanagerListUrlRewritesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUrlRewrites_6(body: UrlmanagerListUrlRewritesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UrlmanagerListUrlRewritesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUrlRewrites_6(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Resolve Url Rewrite
         * @param {UrlmanagerResolveUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resolveUrlRewrite(body: UrlmanagerResolveUrlRewriteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UrlmanagerUrlRewrite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resolveUrlRewrite(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Resolve Url Rewrite
         * @param {UrlmanagerResolveUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resolveUrlRewrite_7(body: UrlmanagerResolveUrlRewriteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UrlmanagerUrlRewrite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resolveUrlRewrite_7(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BasicOperationsApi - factory interface
 * @export
 */
export const BasicOperationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BasicOperationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Change Url Rewrite Request Path
         * @param {UrlmanagerChangeUrlRewriteRequestPathRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUrlRewriteRequestPath(body: UrlmanagerChangeUrlRewriteRequestPathRequest, options?: any): AxiosPromise<object> {
            return localVarFp.changeUrlRewriteRequestPath(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change Url Rewrite Request Path
         * @param {UrlmanagerChangeUrlRewriteRequestPathRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeUrlRewriteRequestPath_1(body: UrlmanagerChangeUrlRewriteRequestPathRequest, options?: any): AxiosPromise<object> {
            return localVarFp.changeUrlRewriteRequestPath_1(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Url Rewrite
         * @param {UrlmanagerCreateUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUrlRewrite(body: UrlmanagerCreateUrlRewriteRequest, options?: any): AxiosPromise<UrlmanagerUrlRewrite> {
            return localVarFp.createUrlRewrite(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Url Rewrite
         * @param {UrlmanagerCreateUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUrlRewrite_2(body: UrlmanagerCreateUrlRewriteRequest, options?: any): AxiosPromise<UrlmanagerUrlRewrite> {
            return localVarFp.createUrlRewrite_2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Url Rewrite
         * @param {UrlmanagerDeleteUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUrlRewrite(body: UrlmanagerDeleteUrlRewriteRequest, options?: any): AxiosPromise<object> {
            return localVarFp.deleteUrlRewrite(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Url Rewrite
         * @param {UrlmanagerDeleteUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUrlRewrite_3(body: UrlmanagerDeleteUrlRewriteRequest, options?: any): AxiosPromise<object> {
            return localVarFp.deleteUrlRewrite_3(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Url Rewrite
         * @param {UrlmanagerGetUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUrlRewrite(body: UrlmanagerGetUrlRewriteRequest, options?: any): AxiosPromise<UrlmanagerUrlRewrite> {
            return localVarFp.getUrlRewrite(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Url Rewrite
         * @param {UrlmanagerGetUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUrlRewrite_4(body: UrlmanagerGetUrlRewriteRequest, options?: any): AxiosPromise<UrlmanagerUrlRewrite> {
            return localVarFp.getUrlRewrite_4(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Url Rewrites
         * @param {UrlmanagerListUrlRewritesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUrlRewrites(body: UrlmanagerListUrlRewritesRequest, options?: any): AxiosPromise<UrlmanagerListUrlRewritesResponse> {
            return localVarFp.listUrlRewrites(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Url Rewrites By Target Paths
         * @param {UrlmanagerListUrlRewritesByTargetPathsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUrlRewritesByTargetPaths(body: UrlmanagerListUrlRewritesByTargetPathsRequest, options?: any): AxiosPromise<UrlmanagerListUrlRewritesByTargetPathsRequest > {
            return localVarFp.listUrlRewritesByTargetPaths(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Url Rewrites By Target Paths
         * @param {UrlmanagerListUrlRewritesByTargetPathsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUrlRewritesByTargetPaths_5(body: UrlmanagerListUrlRewritesByTargetPathsRequest, options?: any): AxiosPromise<UrlmanagerListUrlRewritesByTargetPathsRequest > {
            return localVarFp.listUrlRewritesByTargetPaths_5(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Url Rewrites
         * @param {UrlmanagerListUrlRewritesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUrlRewrites_6(body: UrlmanagerListUrlRewritesRequest, options?: any): AxiosPromise<UrlmanagerListUrlRewritesResponse> {
            return localVarFp.listUrlRewrites_6(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Resolve Url Rewrite
         * @param {UrlmanagerResolveUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveUrlRewrite(body: UrlmanagerResolveUrlRewriteRequest, options?: any): AxiosPromise<UrlmanagerUrlRewrite> {
            return localVarFp.resolveUrlRewrite(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Resolve Url Rewrite
         * @param {UrlmanagerResolveUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveUrlRewrite_7(body: UrlmanagerResolveUrlRewriteRequest, options?: any): AxiosPromise<UrlmanagerUrlRewrite> {
            return localVarFp.resolveUrlRewrite_7(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BasicOperationsApi - object-oriented interface
 * @export
 * @class BasicOperationsApi
 * @extends {BaseAPI}
 */
export class BasicOperationsApi extends BaseAPI {
    /**
     * 
     * @summary Change Url Rewrite Request Path
     * @param {UrlmanagerChangeUrlRewriteRequestPathRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public changeUrlRewriteRequestPath(body: UrlmanagerChangeUrlRewriteRequestPathRequest, options?: AxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).changeUrlRewriteRequestPath(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change Url Rewrite Request Path
     * @param {UrlmanagerChangeUrlRewriteRequestPathRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public changeUrlRewriteRequestPath_1(body: UrlmanagerChangeUrlRewriteRequestPathRequest, options?: AxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).changeUrlRewriteRequestPath_1(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Url Rewrite
     * @param {UrlmanagerCreateUrlRewriteRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public createUrlRewrite(body: UrlmanagerCreateUrlRewriteRequest, options?: AxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).createUrlRewrite(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Url Rewrite
     * @param {UrlmanagerCreateUrlRewriteRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public createUrlRewrite_2(body: UrlmanagerCreateUrlRewriteRequest, options?: AxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).createUrlRewrite_2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Url Rewrite
     * @param {UrlmanagerDeleteUrlRewriteRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public deleteUrlRewrite(body: UrlmanagerDeleteUrlRewriteRequest, options?: AxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).deleteUrlRewrite(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Url Rewrite
     * @param {UrlmanagerDeleteUrlRewriteRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public deleteUrlRewrite_3(body: UrlmanagerDeleteUrlRewriteRequest, options?: AxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).deleteUrlRewrite_3(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Url Rewrite
     * @param {UrlmanagerGetUrlRewriteRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public getUrlRewrite(body: UrlmanagerGetUrlRewriteRequest, options?: AxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).getUrlRewrite(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Url Rewrite
     * @param {UrlmanagerGetUrlRewriteRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public getUrlRewrite_4(body: UrlmanagerGetUrlRewriteRequest, options?: AxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).getUrlRewrite_4(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Url Rewrites
     * @param {UrlmanagerListUrlRewritesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public listUrlRewrites(body: UrlmanagerListUrlRewritesRequest, options?: AxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).listUrlRewrites(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Url Rewrites By Target Paths
     * @param {UrlmanagerListUrlRewritesByTargetPathsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public listUrlRewritesByTargetPaths(body: UrlmanagerListUrlRewritesByTargetPathsRequest, options?: AxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).listUrlRewritesByTargetPaths(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Url Rewrites By Target Paths
     * @param {UrlmanagerListUrlRewritesByTargetPathsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public listUrlRewritesByTargetPaths_5(body: UrlmanagerListUrlRewritesByTargetPathsRequest, options?: AxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).listUrlRewritesByTargetPaths_5(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Url Rewrites
     * @param {UrlmanagerListUrlRewritesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public listUrlRewrites_6(body: UrlmanagerListUrlRewritesRequest, options?: AxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).listUrlRewrites_6(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Resolve Url Rewrite
     * @param {UrlmanagerResolveUrlRewriteRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public resolveUrlRewrite(body: UrlmanagerResolveUrlRewriteRequest, options?: AxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).resolveUrlRewrite(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Resolve Url Rewrite
     * @param {UrlmanagerResolveUrlRewriteRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public resolveUrlRewrite_7(body: UrlmanagerResolveUrlRewriteRequest, options?: AxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).resolveUrlRewrite_7(body, options).then((request) => request(this.axios, this.basePath));
    }
}



