/* tslint:disable */
/* eslint-disable */
/**
 * Url Manager Service
 * The URL Manager service provides a set of APIs for managing URL rewrites within your application. URL rewriting is a technique used to modify the appearance or structure of URLs while maintaining the functionality and accessibility of the underlying resources.  The URL Manager service offers various operations to create, retrieve, update, and delete URL rewrite configurations. These configurations allow you to define rules that map incoming URLs to different paths or destinations based on specific criteria. By using URL rewriting, you can enhance the user experience, improve SEO (Search Engine Optimization), and manage complex URL structures effectively.  To get started with the URL Manager service, you need to integrate the provided Proto API into your application. The API supports various programming languages and frameworks, making it easy to incorporate URL rewriting functionality into your existing codebase.  Once integrated, you can utilize the different API methods to create, manage, and query URL rewrite configurations based on your application\'s requirements.  Refer to the API documentation for detailed information on the request and response formats, authentication requirements, and example usage of each API method.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface GetUrlRewriteRequestCompoundIdentifier
 */
export interface GetUrlRewriteRequestCompoundIdentifier {
    /**
     * 
     * @type {string}
     * @memberof GetUrlRewriteRequestCompoundIdentifier
     */
    'context'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUrlRewriteRequestCompoundIdentifier
     */
    'requestPath'?: string;
}
/**
 * 
 * @export
 * @interface ListUrlRewritesRequestFilter
 */
export interface ListUrlRewritesRequestFilter {
    /**
     * 
     * @type {string}
     * @memberof ListUrlRewritesRequestFilter
     */
    'context'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListUrlRewritesRequestFilter
     */
    'requestPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListUrlRewritesRequestFilter
     */
    'targetPath'?: string;
    /**
     * 
     * @type {UrlRewriteRedirectType}
     * @memberof ListUrlRewritesRequestFilter
     */
    'redirectType'?: UrlRewriteRedirectType;
}


/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const UrlRewriteLinkRel = {
    Unknown: 'LinkRel_UNKNOWN',
    None: 'LinkRel_NONE',
    Canonical: 'LinkRel_CANONICAL',
    Alternate: 'LinkRel_ALTERNATE'
} as const;

export type UrlRewriteLinkRel = typeof UrlRewriteLinkRel[keyof typeof UrlRewriteLinkRel];


/**
 * 
 * @export
 * @enum {string}
 */

export const UrlRewriteRedirectType = {
    Unknown: 'RedirectType_UNKNOWN',
    Ok: 'RedirectType_OK',
    Permanent: 'RedirectType_PERMANENT',
    Temporary: 'RedirectType_TEMPORARY'
} as const;

export type UrlRewriteRedirectType = typeof UrlRewriteRedirectType[keyof typeof UrlRewriteRedirectType];


/**
 * 
 * @export
 * @interface UrlmanagerChangeUrlRewriteRequestPathRequest
 */
export interface UrlmanagerChangeUrlRewriteRequestPathRequest {
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerChangeUrlRewriteRequestPathRequest
     */
    'tenantId'?: string;
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerChangeUrlRewriteRequestPathRequest
     */
    'context'?: string;
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerChangeUrlRewriteRequestPathRequest
     */
    'requestPath'?: string;
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerChangeUrlRewriteRequestPathRequest
     */
    'requestPathNew'?: string;
}
/**
 * 
 * @export
 * @interface UrlmanagerCreateUrlRewriteRequest
 */
export interface UrlmanagerCreateUrlRewriteRequest {
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerCreateUrlRewriteRequest
     */
    'tenantId'?: string;
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerCreateUrlRewriteRequest
     */
    'context'?: string;
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerCreateUrlRewriteRequest
     */
    'requestPath'?: string;
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerCreateUrlRewriteRequest
     */
    'targetPath'?: string;
    /**
     * 
     * @type {UrlRewriteRedirectType}
     * @memberof UrlmanagerCreateUrlRewriteRequest
     */
    'redirectType'?: UrlRewriteRedirectType;
    /**
     * 
     * @type {UrlRewriteLinkRel}
     * @memberof UrlmanagerCreateUrlRewriteRequest
     */
    'linkRel'?: UrlRewriteLinkRel;
}


/**
 * 
 * @export
 * @interface UrlmanagerDeleteUrlRewriteRequest
 */
export interface UrlmanagerDeleteUrlRewriteRequest {
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerDeleteUrlRewriteRequest
     */
    'tenantId'?: string;
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerDeleteUrlRewriteRequest
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface UrlmanagerGetUrlRewriteRequest
 */
export interface UrlmanagerGetUrlRewriteRequest {
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerGetUrlRewriteRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UrlmanagerGetUrlRewriteRequest
     */
    'id'?: string;
    /**
     * 
     * @type {GetUrlRewriteRequestCompoundIdentifier}
     * @memberof UrlmanagerGetUrlRewriteRequest
     */
    'compoundIdentifier'?: GetUrlRewriteRequestCompoundIdentifier;
}
/**
 * 
 * @export
 * @interface UrlmanagerListUrlRewritesByTargetPathsRequest
 */
export interface UrlmanagerListUrlRewritesByTargetPathsRequest {
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerListUrlRewritesByTargetPathsRequest
     */
    'tenantId'?: string;
    /**
     * Required.
     * @type {Array<string>}
     * @memberof UrlmanagerListUrlRewritesByTargetPathsRequest
     */
    'targetPaths'?: Array<string>;
    /**
     * Optional.
     * @type {string}
     * @memberof UrlmanagerListUrlRewritesByTargetPathsRequest
     */
    'context'?: string;
    /**
     * 
     * @type {UrlRewriteLinkRel}
     * @memberof UrlmanagerListUrlRewritesByTargetPathsRequest
     */
    'linkRel'?: UrlRewriteLinkRel;
}


/**
 * 
 * @export
 * @interface UrlmanagerListUrlRewritesByTargetPathsResponse
 */
export interface UrlmanagerListUrlRewritesByTargetPathsResponse {
    /**
     * 
     * @type {Array<UrlmanagerUrlRewrite>}
     * @memberof UrlmanagerListUrlRewritesByTargetPathsResponse
     */
    'urlRewrites'?: Array<UrlmanagerUrlRewrite>;
}
/**
 * 
 * @export
 * @interface UrlmanagerListUrlRewritesRequest
 */
export interface UrlmanagerListUrlRewritesRequest {
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerListUrlRewritesRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {ListUrlRewritesRequestFilter}
     * @memberof UrlmanagerListUrlRewritesRequest
     */
    'filter'?: ListUrlRewritesRequestFilter;
    /**
     * The maximum number of url rewrites to return. The service may return fewer than this value. If unspecified, at most 10 url rewrites will be returned. The maximum value is 200; values above 200 will be coerced to 200.
     * @type {number}
     * @memberof UrlmanagerListUrlRewritesRequest
     */
    'pageSize'?: number;
    /**
     * A page token, received from a previous `ListUrlRewrites` call. Provide this to retrieve the subsequent page.   When paginating, all other parameters provided to `ListUrlRewrites` must match the call that provided the page token.
     * @type {string}
     * @memberof UrlmanagerListUrlRewritesRequest
     */
    'pageToken'?: string;
}
/**
 * 
 * @export
 * @interface UrlmanagerListUrlRewritesResponse
 */
export interface UrlmanagerListUrlRewritesResponse {
    /**
     * 
     * @type {Array<UrlmanagerUrlRewrite>}
     * @memberof UrlmanagerListUrlRewritesResponse
     */
    'urlRewrites'?: Array<UrlmanagerUrlRewrite>;
    /**
     * A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
     * @type {string}
     * @memberof UrlmanagerListUrlRewritesResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface UrlmanagerResolveUrlRewriteRequest
 */
export interface UrlmanagerResolveUrlRewriteRequest {
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerResolveUrlRewriteRequest
     */
    'tenantId'?: string;
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerResolveUrlRewriteRequest
     */
    'context'?: string;
    /**
     * Required.
     * @type {string}
     * @memberof UrlmanagerResolveUrlRewriteRequest
     */
    'requestPath'?: string;
}
/**
 * 
 * @export
 * @interface UrlmanagerUrlRewrite
 */
export interface UrlmanagerUrlRewrite {
    /**
     * 
     * @type {string}
     * @memberof UrlmanagerUrlRewrite
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UrlmanagerUrlRewrite
     */
    'id'?: string;
    /**
     * Context field is part of the key. it\'s up to whoever is using the url manager to define it. e.g. locale or market or a concatenation of the two if needed.
     * @type {string}
     * @memberof UrlmanagerUrlRewrite
     */
    'context'?: string;
    /**
     * 
     * @type {string}
     * @memberof UrlmanagerUrlRewrite
     */
    'requestPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof UrlmanagerUrlRewrite
     */
    'targetPath'?: string;
    /**
     * 
     * @type {UrlRewriteRedirectType}
     * @memberof UrlmanagerUrlRewrite
     */
    'redirectType'?: UrlRewriteRedirectType;
    /**
     * 
     * @type {UrlRewriteLinkRel}
     * @memberof UrlmanagerUrlRewrite
     */
    'linkRel'?: UrlRewriteLinkRel;
}



/**
 * BasicOperationsApi - axios parameter creator
 * @export
 */
export const BasicOperationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Modify the request path of a specific URL rewrite configuration.
         * @summary Change Url Rewrite Request Path
         * @param {UrlmanagerChangeUrlRewriteRequestPathRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerChangeUrlRewriteRequestPath: async (body: UrlmanagerChangeUrlRewriteRequestPathRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('urlManagerChangeUrlRewriteRequestPath', 'body', body)
            const localVarPath = `/urlmanager/change_url_rewrite_request_path`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify the request path of a specific URL rewrite configuration.
         * @summary Change Url Rewrite Request Path
         * @param {UrlmanagerChangeUrlRewriteRequestPathRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerChangeUrlRewriteRequestPath2: async (body: UrlmanagerChangeUrlRewriteRequestPathRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('urlManagerChangeUrlRewriteRequestPath2', 'body', body)
            const localVarPath = `/urlmanager.UrlManager/ChangeUrlRewriteRequestPath`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new URL rewrite configuration with customizable rules.
         * @summary Create Url Rewrite
         * @param {UrlmanagerCreateUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerCreateUrlRewrite: async (body: UrlmanagerCreateUrlRewriteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('urlManagerCreateUrlRewrite', 'body', body)
            const localVarPath = `/urlmanager/create_url_rewrite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new URL rewrite configuration with customizable rules.
         * @summary Create Url Rewrite
         * @param {UrlmanagerCreateUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerCreateUrlRewrite2: async (body: UrlmanagerCreateUrlRewriteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('urlManagerCreateUrlRewrite2', 'body', body)
            const localVarPath = `/urlmanager.UrlManager/CreateUrlRewrite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an existing URL rewrite configuration.
         * @summary Delete Url Rewrite
         * @param {UrlmanagerDeleteUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerDeleteUrlRewrite: async (body: UrlmanagerDeleteUrlRewriteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('urlManagerDeleteUrlRewrite', 'body', body)
            const localVarPath = `/urlmanager/delete_url_rewrite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an existing URL rewrite configuration.
         * @summary Delete Url Rewrite
         * @param {UrlmanagerDeleteUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerDeleteUrlRewrite2: async (body: UrlmanagerDeleteUrlRewriteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('urlManagerDeleteUrlRewrite2', 'body', body)
            const localVarPath = `/urlmanager.UrlManager/DeleteUrlRewrite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the details of a specific URL rewrite configuration.
         * @summary Get Url Rewrite
         * @param {UrlmanagerGetUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerGetUrlRewrite: async (body: UrlmanagerGetUrlRewriteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('urlManagerGetUrlRewrite', 'body', body)
            const localVarPath = `/urlmanager/get_url_rewrite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the details of a specific URL rewrite configuration.
         * @summary Get Url Rewrite
         * @param {UrlmanagerGetUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerGetUrlRewrite2: async (body: UrlmanagerGetUrlRewriteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('urlManagerGetUrlRewrite2', 'body', body)
            const localVarPath = `/urlmanager.UrlManager/GetUrlRewrite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of all URL rewrite configurations in your application.
         * @summary List Url Rewrites
         * @param {UrlmanagerListUrlRewritesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerListUrlRewrites: async (body: UrlmanagerListUrlRewritesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('urlManagerListUrlRewrites', 'body', body)
            const localVarPath = `/urlmanager/list_url_rewrites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of all URL rewrite configurations in your application.
         * @summary List Url Rewrites
         * @param {UrlmanagerListUrlRewritesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerListUrlRewrites2: async (body: UrlmanagerListUrlRewritesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('urlManagerListUrlRewrites2', 'body', body)
            const localVarPath = `/urlmanager.UrlManager/ListUrlRewrites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve URL rewrite configurations based on target paths.
         * @summary List Url Rewrites By Target Paths
         * @param {UrlmanagerListUrlRewritesByTargetPathsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerListUrlRewritesByTargetPaths: async (body: UrlmanagerListUrlRewritesByTargetPathsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('urlManagerListUrlRewritesByTargetPaths', 'body', body)
            const localVarPath = `/urlmanager/list_url_rewrites_by_target_paths`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve URL rewrite configurations based on target paths.
         * @summary List Url Rewrites By Target Paths
         * @param {UrlmanagerListUrlRewritesByTargetPathsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerListUrlRewritesByTargetPaths2: async (body: UrlmanagerListUrlRewritesByTargetPathsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('urlManagerListUrlRewritesByTargetPaths2', 'body', body)
            const localVarPath = `/urlmanager.UrlManager/ListUrlRewritesByTargetPaths`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resolve and retrieve the rewritten URL for a given input URL.
         * @summary Resolve Url Rewrite
         * @param {UrlmanagerResolveUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerResolveUrlRewrite: async (body: UrlmanagerResolveUrlRewriteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('urlManagerResolveUrlRewrite', 'body', body)
            const localVarPath = `/urlmanager/resolve_url_rewrite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resolve and retrieve the rewritten URL for a given input URL.
         * @summary Resolve Url Rewrite
         * @param {UrlmanagerResolveUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerResolveUrlRewrite2: async (body: UrlmanagerResolveUrlRewriteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('urlManagerResolveUrlRewrite2', 'body', body)
            const localVarPath = `/urlmanager.UrlManager/ResolveUrlRewrite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BasicOperationsApi - functional programming interface
 * @export
 */
export const BasicOperationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BasicOperationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Modify the request path of a specific URL rewrite configuration.
         * @summary Change Url Rewrite Request Path
         * @param {UrlmanagerChangeUrlRewriteRequestPathRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlManagerChangeUrlRewriteRequestPath(body: UrlmanagerChangeUrlRewriteRequestPathRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.urlManagerChangeUrlRewriteRequestPath(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BasicOperationsApi.urlManagerChangeUrlRewriteRequestPath']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Modify the request path of a specific URL rewrite configuration.
         * @summary Change Url Rewrite Request Path
         * @param {UrlmanagerChangeUrlRewriteRequestPathRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlManagerChangeUrlRewriteRequestPath2(body: UrlmanagerChangeUrlRewriteRequestPathRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.urlManagerChangeUrlRewriteRequestPath2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BasicOperationsApi.urlManagerChangeUrlRewriteRequestPath2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Create a new URL rewrite configuration with customizable rules.
         * @summary Create Url Rewrite
         * @param {UrlmanagerCreateUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlManagerCreateUrlRewrite(body: UrlmanagerCreateUrlRewriteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UrlmanagerUrlRewrite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.urlManagerCreateUrlRewrite(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BasicOperationsApi.urlManagerCreateUrlRewrite']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Create a new URL rewrite configuration with customizable rules.
         * @summary Create Url Rewrite
         * @param {UrlmanagerCreateUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlManagerCreateUrlRewrite2(body: UrlmanagerCreateUrlRewriteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UrlmanagerUrlRewrite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.urlManagerCreateUrlRewrite2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BasicOperationsApi.urlManagerCreateUrlRewrite2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Delete an existing URL rewrite configuration.
         * @summary Delete Url Rewrite
         * @param {UrlmanagerDeleteUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlManagerDeleteUrlRewrite(body: UrlmanagerDeleteUrlRewriteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.urlManagerDeleteUrlRewrite(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BasicOperationsApi.urlManagerDeleteUrlRewrite']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Delete an existing URL rewrite configuration.
         * @summary Delete Url Rewrite
         * @param {UrlmanagerDeleteUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlManagerDeleteUrlRewrite2(body: UrlmanagerDeleteUrlRewriteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.urlManagerDeleteUrlRewrite2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BasicOperationsApi.urlManagerDeleteUrlRewrite2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Retrieve the details of a specific URL rewrite configuration.
         * @summary Get Url Rewrite
         * @param {UrlmanagerGetUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlManagerGetUrlRewrite(body: UrlmanagerGetUrlRewriteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UrlmanagerUrlRewrite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.urlManagerGetUrlRewrite(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BasicOperationsApi.urlManagerGetUrlRewrite']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Retrieve the details of a specific URL rewrite configuration.
         * @summary Get Url Rewrite
         * @param {UrlmanagerGetUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlManagerGetUrlRewrite2(body: UrlmanagerGetUrlRewriteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UrlmanagerUrlRewrite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.urlManagerGetUrlRewrite2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BasicOperationsApi.urlManagerGetUrlRewrite2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Retrieve a list of all URL rewrite configurations in your application.
         * @summary List Url Rewrites
         * @param {UrlmanagerListUrlRewritesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlManagerListUrlRewrites(body: UrlmanagerListUrlRewritesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UrlmanagerListUrlRewritesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.urlManagerListUrlRewrites(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BasicOperationsApi.urlManagerListUrlRewrites']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Retrieve a list of all URL rewrite configurations in your application.
         * @summary List Url Rewrites
         * @param {UrlmanagerListUrlRewritesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlManagerListUrlRewrites2(body: UrlmanagerListUrlRewritesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UrlmanagerListUrlRewritesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.urlManagerListUrlRewrites2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BasicOperationsApi.urlManagerListUrlRewrites2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Retrieve URL rewrite configurations based on target paths.
         * @summary List Url Rewrites By Target Paths
         * @param {UrlmanagerListUrlRewritesByTargetPathsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlManagerListUrlRewritesByTargetPaths(body: UrlmanagerListUrlRewritesByTargetPathsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UrlmanagerListUrlRewritesByTargetPathsRequest >> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.urlManagerListUrlRewritesByTargetPaths(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BasicOperationsApi.urlManagerListUrlRewritesByTargetPaths']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Retrieve URL rewrite configurations based on target paths.
         * @summary List Url Rewrites By Target Paths
         * @param {UrlmanagerListUrlRewritesByTargetPathsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlManagerListUrlRewritesByTargetPaths2(body: UrlmanagerListUrlRewritesByTargetPathsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UrlmanagerListUrlRewritesByTargetPathsRequest >> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.urlManagerListUrlRewritesByTargetPaths2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BasicOperationsApi.urlManagerListUrlRewritesByTargetPaths2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Resolve and retrieve the rewritten URL for a given input URL.
         * @summary Resolve Url Rewrite
         * @param {UrlmanagerResolveUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlManagerResolveUrlRewrite(body: UrlmanagerResolveUrlRewriteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UrlmanagerUrlRewrite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.urlManagerResolveUrlRewrite(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BasicOperationsApi.urlManagerResolveUrlRewrite']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Resolve and retrieve the rewritten URL for a given input URL.
         * @summary Resolve Url Rewrite
         * @param {UrlmanagerResolveUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async urlManagerResolveUrlRewrite2(body: UrlmanagerResolveUrlRewriteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UrlmanagerUrlRewrite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.urlManagerResolveUrlRewrite2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BasicOperationsApi.urlManagerResolveUrlRewrite2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * BasicOperationsApi - factory interface
 * @export
 */
export const BasicOperationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BasicOperationsApiFp(configuration)
    return {
        /**
         * Modify the request path of a specific URL rewrite configuration.
         * @summary Change Url Rewrite Request Path
         * @param {UrlmanagerChangeUrlRewriteRequestPathRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerChangeUrlRewriteRequestPath(body: UrlmanagerChangeUrlRewriteRequestPathRequest, options?: any): AxiosPromise<object> {
            return localVarFp.urlManagerChangeUrlRewriteRequestPath(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify the request path of a specific URL rewrite configuration.
         * @summary Change Url Rewrite Request Path
         * @param {UrlmanagerChangeUrlRewriteRequestPathRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerChangeUrlRewriteRequestPath2(body: UrlmanagerChangeUrlRewriteRequestPathRequest, options?: any): AxiosPromise<object> {
            return localVarFp.urlManagerChangeUrlRewriteRequestPath2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new URL rewrite configuration with customizable rules.
         * @summary Create Url Rewrite
         * @param {UrlmanagerCreateUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerCreateUrlRewrite(body: UrlmanagerCreateUrlRewriteRequest, options?: any): AxiosPromise<UrlmanagerUrlRewrite> {
            return localVarFp.urlManagerCreateUrlRewrite(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new URL rewrite configuration with customizable rules.
         * @summary Create Url Rewrite
         * @param {UrlmanagerCreateUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerCreateUrlRewrite2(body: UrlmanagerCreateUrlRewriteRequest, options?: any): AxiosPromise<UrlmanagerUrlRewrite> {
            return localVarFp.urlManagerCreateUrlRewrite2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an existing URL rewrite configuration.
         * @summary Delete Url Rewrite
         * @param {UrlmanagerDeleteUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerDeleteUrlRewrite(body: UrlmanagerDeleteUrlRewriteRequest, options?: any): AxiosPromise<object> {
            return localVarFp.urlManagerDeleteUrlRewrite(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an existing URL rewrite configuration.
         * @summary Delete Url Rewrite
         * @param {UrlmanagerDeleteUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerDeleteUrlRewrite2(body: UrlmanagerDeleteUrlRewriteRequest, options?: any): AxiosPromise<object> {
            return localVarFp.urlManagerDeleteUrlRewrite2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the details of a specific URL rewrite configuration.
         * @summary Get Url Rewrite
         * @param {UrlmanagerGetUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerGetUrlRewrite(body: UrlmanagerGetUrlRewriteRequest, options?: any): AxiosPromise<UrlmanagerUrlRewrite> {
            return localVarFp.urlManagerGetUrlRewrite(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the details of a specific URL rewrite configuration.
         * @summary Get Url Rewrite
         * @param {UrlmanagerGetUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerGetUrlRewrite2(body: UrlmanagerGetUrlRewriteRequest, options?: any): AxiosPromise<UrlmanagerUrlRewrite> {
            return localVarFp.urlManagerGetUrlRewrite2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of all URL rewrite configurations in your application.
         * @summary List Url Rewrites
         * @param {UrlmanagerListUrlRewritesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerListUrlRewrites(body: UrlmanagerListUrlRewritesRequest, options?: any): AxiosPromise<UrlmanagerListUrlRewritesResponse> {
            return localVarFp.urlManagerListUrlRewrites(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of all URL rewrite configurations in your application.
         * @summary List Url Rewrites
         * @param {UrlmanagerListUrlRewritesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerListUrlRewrites2(body: UrlmanagerListUrlRewritesRequest, options?: any): AxiosPromise<UrlmanagerListUrlRewritesResponse> {
            return localVarFp.urlManagerListUrlRewrites2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve URL rewrite configurations based on target paths.
         * @summary List Url Rewrites By Target Paths
         * @param {UrlmanagerListUrlRewritesByTargetPathsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerListUrlRewritesByTargetPaths(body: UrlmanagerListUrlRewritesByTargetPathsRequest, options?: any): AxiosPromise<UrlmanagerListUrlRewritesByTargetPathsRequest > {
            return localVarFp.urlManagerListUrlRewritesByTargetPaths(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve URL rewrite configurations based on target paths.
         * @summary List Url Rewrites By Target Paths
         * @param {UrlmanagerListUrlRewritesByTargetPathsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerListUrlRewritesByTargetPaths2(body: UrlmanagerListUrlRewritesByTargetPathsRequest, options?: any): AxiosPromise<UrlmanagerListUrlRewritesByTargetPathsRequest > {
            return localVarFp.urlManagerListUrlRewritesByTargetPaths2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Resolve and retrieve the rewritten URL for a given input URL.
         * @summary Resolve Url Rewrite
         * @param {UrlmanagerResolveUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerResolveUrlRewrite(body: UrlmanagerResolveUrlRewriteRequest, options?: any): AxiosPromise<UrlmanagerUrlRewrite> {
            return localVarFp.urlManagerResolveUrlRewrite(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Resolve and retrieve the rewritten URL for a given input URL.
         * @summary Resolve Url Rewrite
         * @param {UrlmanagerResolveUrlRewriteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        urlManagerResolveUrlRewrite2(body: UrlmanagerResolveUrlRewriteRequest, options?: any): AxiosPromise<UrlmanagerUrlRewrite> {
            return localVarFp.urlManagerResolveUrlRewrite2(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BasicOperationsApi - object-oriented interface
 * @export
 * @class BasicOperationsApi
 * @extends {BaseAPI}
 */
export class BasicOperationsApi extends BaseAPI {
    /**
     * Modify the request path of a specific URL rewrite configuration.
     * @summary Change Url Rewrite Request Path
     * @param {UrlmanagerChangeUrlRewriteRequestPathRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public urlManagerChangeUrlRewriteRequestPath(body: UrlmanagerChangeUrlRewriteRequestPathRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).urlManagerChangeUrlRewriteRequestPath(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify the request path of a specific URL rewrite configuration.
     * @summary Change Url Rewrite Request Path
     * @param {UrlmanagerChangeUrlRewriteRequestPathRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public urlManagerChangeUrlRewriteRequestPath2(body: UrlmanagerChangeUrlRewriteRequestPathRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).urlManagerChangeUrlRewriteRequestPath2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new URL rewrite configuration with customizable rules.
     * @summary Create Url Rewrite
     * @param {UrlmanagerCreateUrlRewriteRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public urlManagerCreateUrlRewrite(body: UrlmanagerCreateUrlRewriteRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).urlManagerCreateUrlRewrite(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new URL rewrite configuration with customizable rules.
     * @summary Create Url Rewrite
     * @param {UrlmanagerCreateUrlRewriteRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public urlManagerCreateUrlRewrite2(body: UrlmanagerCreateUrlRewriteRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).urlManagerCreateUrlRewrite2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an existing URL rewrite configuration.
     * @summary Delete Url Rewrite
     * @param {UrlmanagerDeleteUrlRewriteRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public urlManagerDeleteUrlRewrite(body: UrlmanagerDeleteUrlRewriteRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).urlManagerDeleteUrlRewrite(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an existing URL rewrite configuration.
     * @summary Delete Url Rewrite
     * @param {UrlmanagerDeleteUrlRewriteRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public urlManagerDeleteUrlRewrite2(body: UrlmanagerDeleteUrlRewriteRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).urlManagerDeleteUrlRewrite2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the details of a specific URL rewrite configuration.
     * @summary Get Url Rewrite
     * @param {UrlmanagerGetUrlRewriteRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public urlManagerGetUrlRewrite(body: UrlmanagerGetUrlRewriteRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).urlManagerGetUrlRewrite(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the details of a specific URL rewrite configuration.
     * @summary Get Url Rewrite
     * @param {UrlmanagerGetUrlRewriteRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public urlManagerGetUrlRewrite2(body: UrlmanagerGetUrlRewriteRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).urlManagerGetUrlRewrite2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of all URL rewrite configurations in your application.
     * @summary List Url Rewrites
     * @param {UrlmanagerListUrlRewritesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public urlManagerListUrlRewrites(body: UrlmanagerListUrlRewritesRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).urlManagerListUrlRewrites(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of all URL rewrite configurations in your application.
     * @summary List Url Rewrites
     * @param {UrlmanagerListUrlRewritesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public urlManagerListUrlRewrites2(body: UrlmanagerListUrlRewritesRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).urlManagerListUrlRewrites2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve URL rewrite configurations based on target paths.
     * @summary List Url Rewrites By Target Paths
     * @param {UrlmanagerListUrlRewritesByTargetPathsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public urlManagerListUrlRewritesByTargetPaths(body: UrlmanagerListUrlRewritesByTargetPathsRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).urlManagerListUrlRewritesByTargetPaths(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve URL rewrite configurations based on target paths.
     * @summary List Url Rewrites By Target Paths
     * @param {UrlmanagerListUrlRewritesByTargetPathsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public urlManagerListUrlRewritesByTargetPaths2(body: UrlmanagerListUrlRewritesByTargetPathsRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).urlManagerListUrlRewritesByTargetPaths2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resolve and retrieve the rewritten URL for a given input URL.
     * @summary Resolve Url Rewrite
     * @param {UrlmanagerResolveUrlRewriteRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public urlManagerResolveUrlRewrite(body: UrlmanagerResolveUrlRewriteRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).urlManagerResolveUrlRewrite(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resolve and retrieve the rewritten URL for a given input URL.
     * @summary Resolve Url Rewrite
     * @param {UrlmanagerResolveUrlRewriteRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicOperationsApi
     */
    public urlManagerResolveUrlRewrite2(body: UrlmanagerResolveUrlRewriteRequest, options?: RawAxiosRequestConfig) {
        return BasicOperationsApiFp(this.configuration).urlManagerResolveUrlRewrite2(body, options).then((request) => request(this.axios, this.basePath));
    }
}



